"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.lintInitGenerator = void 0;
const devkit_1 = require("@nx/devkit");
const versions_1 = require("../../utils/versions");
const eslint_file_1 = require("../utils/eslint-file");
const global_eslint_config_1 = require("./global-eslint-config");
const plugin_1 = require("../utils/plugin");
function updateProductionFileset(tree) {
    const nxJson = (0, devkit_1.readNxJson)(tree);
    const productionFileSet = nxJson.namedInputs?.production;
    if (productionFileSet) {
        productionFileSet.push('!{projectRoot}/.eslintrc.json');
        productionFileSet.push('!{projectRoot}/eslint.config.js');
        // Dedupe and set
        nxJson.namedInputs.production = Array.from(new Set(productionFileSet));
    }
    (0, devkit_1.updateNxJson)(tree, nxJson);
}
function addTargetDefaults(tree) {
    const nxJson = (0, devkit_1.readNxJson)(tree);
    nxJson.targetDefaults ??= {};
    nxJson.targetDefaults.lint ??= {};
    nxJson.targetDefaults.lint.cache ??= true;
    nxJson.targetDefaults.lint.inputs ??= [
        'default',
        `{workspaceRoot}/.eslintrc.json`,
        `{workspaceRoot}/.eslintignore`,
        `{workspaceRoot}/eslint.config.js`,
    ];
    (0, devkit_1.updateNxJson)(tree, nxJson);
}
function addPlugin(tree) {
    const nxJson = (0, devkit_1.readNxJson)(tree);
    nxJson.plugins ??= [];
    for (const plugin of nxJson.plugins) {
        if (typeof plugin === 'string'
            ? plugin === '@nx/eslint/plugin'
            : plugin.plugin === '@nx/eslint/plugin') {
            return;
        }
    }
    nxJson.plugins.push({
        plugin: '@nx/eslint/plugin',
        options: {
            targetName: 'lint',
        },
    });
    (0, devkit_1.updateNxJson)(tree, nxJson);
}
function updateVSCodeExtensions(tree) {
    if (tree.exists('.vscode/extensions.json')) {
        (0, devkit_1.updateJson)(tree, '.vscode/extensions.json', (json) => {
            json.recommendations ||= [];
            const extension = 'dbaeumer.vscode-eslint';
            if (!json.recommendations.includes(extension)) {
                json.recommendations.push(extension);
            }
            return json;
        });
    }
}
/**
 * Initializes ESLint configuration in a workspace and adds necessary dependencies.
 */
function initEsLint(tree, options) {
    const addPlugins = process.env.NX_PCV3 === 'true';
    const hasPlugin = (0, plugin_1.hasEslintPlugin)(tree);
    const rootEslintFile = (0, eslint_file_1.findEslintFile)(tree);
    if (rootEslintFile && addPlugins && !hasPlugin) {
        addPlugin(tree);
        return () => { };
    }
    if (rootEslintFile) {
        return () => { };
    }
    if (!options.skipPackageJson) {
        (0, devkit_1.removeDependenciesFromPackageJson)(tree, ['@nx/eslint'], []);
    }
    (0, devkit_1.writeJson)(tree, '.eslintrc.json', (0, global_eslint_config_1.getGlobalEsLintConfiguration)(options.unitTestRunner, options.rootProject));
    tree.write('.eslintignore', 'node_modules\n');
    updateProductionFileset(tree);
    if (addPlugins) {
        addPlugin(tree);
    }
    else {
        addTargetDefaults(tree);
    }
    updateVSCodeExtensions(tree);
    return !options.skipPackageJson
        ? (0, devkit_1.addDependenciesToPackageJson)(tree, {}, {
            '@nx/eslint': versions_1.nxVersion,
            '@nx/eslint-plugin': versions_1.nxVersion,
            '@typescript-eslint/parser': versions_1.typescriptESLintVersion,
            '@typescript-eslint/eslint-plugin': versions_1.typescriptESLintVersion,
            eslint: versions_1.eslintVersion,
            'eslint-config-prettier': versions_1.eslintConfigPrettierVersion,
        })
        : () => { };
}
function lintInitGenerator(tree, options) {
    return initEsLint(tree, options);
}
exports.lintInitGenerator = lintInitGenerator;
