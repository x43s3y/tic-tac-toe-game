"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.configurationGenerator = void 0;
const init_1 = require("../init/init");
const check_for_test_target_1 = require("./lib/check-for-test-target");
const create_files_1 = require("./lib/create-files");
const update_tsconfig_1 = require("./lib/update-tsconfig");
const update_workspace_1 = require("./lib/update-workspace");
const devkit_1 = require("@nx/devkit");
const schemaDefaults = {
    setupFile: 'none',
    babelJest: false,
    supportTsx: false,
    skipSetupFile: false,
    skipSerializers: false,
    testEnvironment: 'jsdom',
};
function normalizeOptions(tree, options) {
    if (!options.testEnvironment) {
        options.testEnvironment = 'jsdom';
    }
    if (!options.hasOwnProperty('supportTsx')) {
        options.supportTsx = false;
    }
    // if we support TSX or compiler is not tsc, then we don't support angular(html templates)
    if (options.supportTsx ||
        options.babelJest ||
        ['swc', 'babel'].includes(options.compiler)) {
        options.skipSerializers = true;
    }
    if (options.skipSetupFile) {
        // setupFile is always 'none'
        options.setupFile = schemaDefaults.setupFile;
    }
    const project = (0, devkit_1.readProjectConfiguration)(tree, options.project);
    return {
        ...schemaDefaults,
        ...options,
        rootProject: project.root === '.' || project.root === '',
    };
}
async function configurationGenerator(tree, schema) {
    const options = normalizeOptions(tree, schema);
    const installTask = await (0, init_1.default)(tree, options);
    (0, check_for_test_target_1.checkForTestTarget)(tree, options);
    (0, create_files_1.createFiles)(tree, options);
    (0, update_tsconfig_1.updateTsConfig)(tree, options);
    (0, update_workspace_1.updateWorkspace)(tree, options);
    if (!schema.skipFormat) {
        await (0, devkit_1.formatFiles)(tree);
    }
    return installTask;
}
exports.configurationGenerator = configurationGenerator;
exports.default = configurationGenerator;
