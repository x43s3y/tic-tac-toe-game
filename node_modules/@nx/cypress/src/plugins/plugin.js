"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createNodes = exports.createDependencies = void 0;
const devkit_1 = require("@nx/devkit");
const path_1 = require("path");
const internal_1 = require("@nx/js/src/internal");
const js_1 = require("@nx/js");
const get_named_inputs_1 = require("@nx/devkit/src/utils/get-named-inputs");
const fs_1 = require("fs");
const workspace_context_1 = require("nx/src/utils/workspace-context");
const calculate_hash_for_create_nodes_1 = require("@nx/devkit/src/utils/calculate-hash-for-create-nodes");
const cache_directory_1 = require("nx/src/utils/cache-directory");
const symbols_1 = require("../utils/symbols");
const cachePath = (0, path_1.join)(cache_directory_1.projectGraphCacheDirectory, 'cypress.hash');
const targetsCache = (0, fs_1.existsSync)(cachePath) ? readTargetsCache() : {};
const calculatedTargets = {};
function readTargetsCache() {
    return (0, devkit_1.readJsonFile)(cachePath);
}
function writeTargetsToCache(targets) {
    (0, devkit_1.writeJsonFile)(cachePath, targets);
}
const createDependencies = () => {
    writeTargetsToCache(calculatedTargets);
    return [];
};
exports.createDependencies = createDependencies;
exports.createNodes = [
    '**/cypress.config.{js,ts,mjs,mts,cjs,cts}',
    (configFilePath, options, context) => {
        options = normalizeOptions(options);
        const projectRoot = (0, path_1.dirname)(configFilePath);
        // Do not create a project if package.json and project.json isn't there.
        const siblingFiles = (0, fs_1.readdirSync)((0, path_1.join)(context.workspaceRoot, projectRoot));
        if (!siblingFiles.includes('package.json') &&
            !siblingFiles.includes('project.json')) {
            return {};
        }
        const hash = (0, calculate_hash_for_create_nodes_1.calculateHashForCreateNodes)(projectRoot, options, context, [
            (0, js_1.getLockFileName)((0, devkit_1.detectPackageManager)(context.workspaceRoot)),
        ]);
        const targets = targetsCache[hash]
            ? targetsCache[hash]
            : buildCypressTargets(configFilePath, projectRoot, options, context);
        calculatedTargets[hash] = targets;
        return {
            projects: {
                [projectRoot]: {
                    projectType: 'application',
                    targets,
                },
            },
        };
    },
];
function getOutputs(projectRoot, cypressConfig, testingType) {
    function getOutput(path) {
        if (path.startsWith('..')) {
            return (0, path_1.join)('{workspaceRoot}', (0, path_1.join)(projectRoot, path));
        }
        else {
            return (0, path_1.join)('{projectRoot}', path);
        }
    }
    const { screenshotsFolder, videosFolder, e2e, component } = cypressConfig;
    const outputs = [];
    if (videosFolder) {
        outputs.push(getOutput(videosFolder));
    }
    if (screenshotsFolder) {
        outputs.push(getOutput(screenshotsFolder));
    }
    switch (testingType) {
        case 'e2e': {
            if (e2e.videosFolder) {
                outputs.push(getOutput(e2e.videosFolder));
            }
            if (e2e.screenshotsFolder) {
                outputs.push(getOutput(e2e.screenshotsFolder));
            }
            break;
        }
        case 'component': {
            if (component.videosFolder) {
                outputs.push(getOutput(component.videosFolder));
            }
            if (component.screenshotsFolder) {
                outputs.push(getOutput(component.screenshotsFolder));
            }
            break;
        }
    }
    return outputs;
}
function buildCypressTargets(configFilePath, projectRoot, options, context) {
    const cypressConfig = getCypressConfig(configFilePath, context);
    const pluginPresetOptions = {
        ...cypressConfig.e2e?.[symbols_1.NX_PLUGIN_OPTIONS],
        ...cypressConfig.env,
        ...cypressConfig.e2e?.env,
    };
    const webServerCommands = pluginPresetOptions?.webServerCommands;
    const relativeConfigPath = (0, path_1.relative)(projectRoot, configFilePath);
    const namedInputs = (0, get_named_inputs_1.getNamedInputs)(projectRoot, context);
    const targets = {};
    if ('e2e' in cypressConfig) {
        targets[options.targetName] = {
            command: `cypress run --config-file ${relativeConfigPath} --e2e`,
            options: { cwd: projectRoot },
            cache: true,
            inputs: getInputs(namedInputs),
            outputs: getOutputs(projectRoot, cypressConfig, 'e2e'),
        };
        if (webServerCommands?.default) {
            delete webServerCommands.default;
        }
        if (Object.keys(webServerCommands ?? {}).length > 0) {
            targets[options.targetName].configurations ??= {};
            for (const [configuration, webServerCommand] of Object.entries(webServerCommands ?? {})) {
                targets[options.targetName].configurations[configuration] = {
                    command: `cypress run --config-file ${relativeConfigPath} --e2e --env webServerCommand="${webServerCommand}"`,
                };
            }
        }
        const ciWebServerCommand = pluginPresetOptions?.ciWebServerCommand;
        if (ciWebServerCommand) {
            const specPatterns = Array.isArray(cypressConfig.e2e.specPattern)
                ? cypressConfig.e2e.specPattern.map((p) => (0, path_1.join)(projectRoot, p))
                : [(0, path_1.join)(projectRoot, cypressConfig.e2e.specPattern)];
            const excludeSpecPatterns = !cypressConfig.e2e
                .excludeSpecPattern
                ? cypressConfig.e2e.excludeSpecPattern
                : Array.isArray(cypressConfig.e2e.excludeSpecPattern)
                    ? cypressConfig.e2e.excludeSpecPattern.map((p) => (0, path_1.join)(projectRoot, p))
                    : [(0, path_1.join)(projectRoot, cypressConfig.e2e.excludeSpecPattern)];
            const specFiles = (0, workspace_context_1.globWithWorkspaceContext)(context.workspaceRoot, specPatterns, excludeSpecPatterns);
            const dependsOn = [];
            const outputs = getOutputs(projectRoot, cypressConfig, 'e2e');
            const inputs = getInputs(namedInputs);
            for (const file of specFiles) {
                const relativeSpecFilePath = (0, path_1.relative)(projectRoot, file);
                const targetName = options.ciTargetName + '--' + relativeSpecFilePath;
                targets[targetName] = {
                    outputs,
                    inputs,
                    cache: true,
                    command: `cypress run --config-file ${relativeConfigPath} --e2e --env webServerCommand="${ciWebServerCommand}" --spec ${relativeSpecFilePath}`,
                    options: {
                        cwd: projectRoot,
                    },
                };
                dependsOn.push({
                    target: targetName,
                    projects: 'self',
                    params: 'forward',
                });
            }
            targets[options.ciTargetName] ??= {};
            targets[options.ciTargetName] = {
                executor: 'nx:noop',
                cache: true,
                inputs,
                outputs,
                dependsOn,
            };
        }
    }
    if ('component' in cypressConfig) {
        // This will not override the e2e target if it is the same
        targets[options.componentTestingTargetName] ??= {
            command: `cypress open --config-file ${relativeConfigPath} --component`,
            options: { cwd: projectRoot },
            cache: true,
            inputs: getInputs(namedInputs),
            outputs: getOutputs(projectRoot, cypressConfig, 'component'),
        };
    }
    return targets;
}
function getCypressConfig(configFilePath, context) {
    const resolvedPath = (0, path_1.join)(context.workspaceRoot, configFilePath);
    let module;
    if (['.ts', '.mts', '.cts'].includes((0, path_1.extname)(configFilePath))) {
        const tsConfigPath = (0, js_1.getRootTsConfigPath)();
        if (tsConfigPath) {
            const unregisterTsProject = (0, internal_1.registerTsProject)(tsConfigPath);
            try {
                module = load(resolvedPath);
            }
            finally {
                unregisterTsProject();
            }
        }
        else {
            module = load(resolvedPath);
        }
    }
    else {
        module = load(resolvedPath);
    }
    return module.default ?? module;
}
function normalizeOptions(options) {
    options ??= {};
    options.targetName ??= 'e2e';
    options.componentTestingTargetName ??= 'component-test';
    options.ciTargetName ??= 'e2e-ci';
    return options;
}
function getInputs(namedInputs) {
    return [
        ...('production' in namedInputs
            ? ['default', '^production']
            : ['default', '^default']),
        {
            externalDependencies: ['cypress'],
        },
    ];
}
/**
 * Load the module after ensuring that the require cache is cleared.
 */
function load(path) {
    // Clear cache if the path is in the cache
    if (require.cache[path]) {
        for (const k of Object.keys(require.cache)) {
            delete require.cache[k];
        }
    }
    // Then require
    return require(path);
}
