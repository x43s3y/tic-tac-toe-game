"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const devkit_1 = require("@nx/devkit");
const executor_options_utils_1 = require("@nx/devkit/src/generators/executor-options-utils");
async function default_1(tree) {
    const nxJson = (0, devkit_1.readNxJson)(tree);
    const { cypressTargets, hasComponentTesting } = getCypressTargetNames(tree);
    const hasProductionFileset = !!nxJson.namedInputs?.production;
    if (hasComponentTesting && hasProductionFileset && cypressTargets.size > 0) {
        const productionFileset = new Set(nxJson.namedInputs.production);
        for (const exclusion of [
            '!{projectRoot}/cypress/**/*',
            '!{projectRoot}/**/*.cy.[jt]s?(x)',
            '!{projectRoot}/cypress.config.[jt]s',
        ]) {
            productionFileset.add(exclusion);
        }
        nxJson.namedInputs.production = Array.from(productionFileset);
    }
    for (const targetName of cypressTargets) {
        nxJson.targetDefaults ??= {};
        const cypressTargetDefaults = (nxJson.targetDefaults[targetName] ??= {});
        cypressTargetDefaults.inputs ??= [
            'default',
            hasProductionFileset ? '^production' : '^default',
        ];
    }
    (0, devkit_1.updateNxJson)(tree, nxJson);
    await (0, devkit_1.formatFiles)(tree);
}
exports.default = default_1;
function getCypressTargetNames(tree) {
    const cypressTargets = new Set();
    let hasComponentTesting = false;
    (0, executor_options_utils_1.forEachExecutorOptions)(tree, '@nrwl/cypress:cypress', (options, __, target) => {
        cypressTargets.add(target);
        if (options.testingType === 'component') {
            hasComponentTesting = true;
        }
    });
    return { cypressTargets, hasComponentTesting };
}
