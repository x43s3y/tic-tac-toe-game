"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.fixLegacyCypressTsconfig = void 0;
const executor_options_utils_1 = require("@nx/devkit/src/generators/executor-options-utils");
const devkit_1 = require("@nx/devkit");
const path_1 = require("path");
async function fixLegacyCypressTsconfig(tree) {
    const projects = (0, devkit_1.getProjects)(tree);
    (0, executor_options_utils_1.forEachExecutorOptions)(tree, '@nx/cypress:cypress', (options, projectName, targetName, configName) => {
        const projectConfig = projects.get(projectName);
        if (options.testingType !== 'e2e' &&
            projectConfig.targets[targetName]?.options?.testingType !== 'e2e') {
            return;
        }
        const tsconfigToRemove = options.tsConfig ??
            (0, devkit_1.joinPathFragments)(projectConfig.root, 'tsconfig.e2e.json');
        const projectLevelConfigPath = (0, devkit_1.joinPathFragments)(projectConfig.root, 'tsconfig.json');
        if (!tree.exists(projectLevelConfigPath) ||
            !tree.exists(tsconfigToRemove)) {
            return;
        }
        if (tsconfigToRemove === projectLevelConfigPath) {
            (0, devkit_1.updateJson)(tree, projectLevelConfigPath, (json) => {
                json.compilerOptions = {
                    sourceMap: false,
                    ...json.compilerOptions,
                };
                return json;
            });
        }
        else {
            const e2eConfig = (0, devkit_1.readJson)(tree, tsconfigToRemove);
            (0, devkit_1.updateJson)(tree, projectLevelConfigPath, (json) => {
                json.compilerOptions = {
                    sourceMap: false,
                    ...json.compilerOptions,
                    ...e2eConfig.compilerOptions,
                };
                json.files = Array.from(new Set([...(json.files ?? []), ...(e2eConfig.files ?? [])]));
                json.include = Array.from(new Set([...(json.include ?? []), ...(e2eConfig.include ?? [])]));
                json.exclude = Array.from(new Set([...(json.exclude ?? []), ...(e2eConfig.exclude ?? [])]));
                // these paths will always be 'unix style'
                // and on windows relative will not work on these paths
                const tsConfigFromProjRoot = path_1.posix.relative(projectConfig.root, tsconfigToRemove);
                json.references = (json.references ?? []).filter(({ path }) => !path.includes(tsConfigFromProjRoot));
                return json;
            });
            tree.delete(tsconfigToRemove);
        }
        if (configName) {
            delete projectConfig.targets[targetName].configurations[configName]
                .tsConfig;
        }
        else {
            delete projectConfig.targets[targetName].options.tsConfig;
        }
        (0, devkit_1.updateProjectConfiguration)(tree, projectName, projectConfig);
    });
    await (0, devkit_1.formatFiles)(tree);
}
exports.fixLegacyCypressTsconfig = fixLegacyCypressTsconfig;
exports.default = fixLegacyCypressTsconfig;
