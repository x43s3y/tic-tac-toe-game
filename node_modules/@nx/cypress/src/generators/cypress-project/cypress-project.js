"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.cypressProjectGeneratorInternal = exports.cypressProjectGenerator = void 0;
const devkit_1 = require("@nx/devkit");
const project_name_and_root_utils_1 = require("@nx/devkit/src/generators/project-name-and-root-utils");
const semver_1 = require("@nx/devkit/src/utils/semver");
const js_1 = require("@nx/js");
const eslint_1 = require("@nx/eslint");
const path_1 = require("path");
const semver_2 = require("semver");
const add_linter_1 = require("../../utils/add-linter");
const cypress_version_1 = require("../../utils/cypress-version");
const versions_1 = require("../../utils/versions");
const init_1 = require("../init/init");
function createFiles(tree, options) {
    // if not installed or >v10 use v10 folder
    // else use v9 folder
    const cypressVersion = (0, cypress_version_1.installedCypressVersion)();
    const cypressFiles = cypressVersion && cypressVersion < 10 ? 'v9-and-under' : 'v10-and-after';
    (0, devkit_1.generateFiles)(tree, (0, path_1.join)(__dirname, './files', cypressFiles), options.projectRoot, {
        tmpl: '',
        ...options,
        project: options.project || 'Project',
        ext: options.js ? 'js' : 'ts',
        offsetFromRoot: (0, devkit_1.offsetFromRoot)(options.projectRoot),
        rootTsConfigPath: (0, js_1.getRelativePathToRootTsConfig)(tree, options.projectRoot),
        bundler: options.bundler,
    });
    if (cypressVersion && cypressVersion < 7) {
        (0, devkit_1.updateJson)(tree, (0, path_1.join)(options.projectRoot, 'cypress.json'), (json) => {
            json.pluginsFile = './src/plugins/index';
            return json;
        });
    }
    else if (cypressVersion < 10) {
        const pluginPath = (0, path_1.join)(options.projectRoot, 'src/plugins/index.js');
        if (tree.exists(pluginPath)) {
            tree.delete(pluginPath);
        }
    }
    if (options.js) {
        (0, devkit_1.toJS)(tree);
    }
}
function addProject(tree, options) {
    let e2eProjectConfig;
    const detectedCypressVersion = (0, cypress_version_1.installedCypressVersion)() ??
        (0, semver_2.major)((0, semver_1.checkAndCleanWithSemver)('cypress', versions_1.cypressVersion));
    const cypressConfig = detectedCypressVersion < 10 ? 'cypress.json' : 'cypress.config.ts';
    if (options.baseUrl) {
        e2eProjectConfig = {
            root: options.projectRoot,
            sourceRoot: (0, devkit_1.joinPathFragments)(options.projectRoot, 'src'),
            projectType: 'application',
            targets: {
                e2e: {
                    executor: '@nx/cypress:cypress',
                    options: {
                        cypressConfig: (0, devkit_1.joinPathFragments)(options.projectRoot, cypressConfig),
                        baseUrl: options.baseUrl,
                        testingType: 'e2e',
                    },
                },
            },
            tags: [],
            implicitDependencies: options.project ? [options.project] : undefined,
        };
    }
    else if (options.project) {
        const project = (0, devkit_1.readProjectConfiguration)(tree, options.project);
        if (!project.targets) {
            devkit_1.logger.warn((0, devkit_1.stripIndents) `
      NOTE: Project, "${options.project}", does not have any targets defined and a baseUrl was not provided. Nx will use
      "${options.project}:serve" as the devServerTarget. But you may need to define this target within the project, "${options.project}".
      `);
        }
        const devServerTarget = project.targets?.serve && project.targets?.serve?.defaultConfiguration
            ? `${options.project}:serve:${project.targets.serve.defaultConfiguration}`
            : `${options.project}:serve`;
        e2eProjectConfig = {
            root: options.projectRoot,
            sourceRoot: (0, devkit_1.joinPathFragments)(options.projectRoot, 'src'),
            projectType: 'application',
            targets: {
                e2e: {
                    executor: '@nx/cypress:cypress',
                    options: {
                        cypressConfig: (0, devkit_1.joinPathFragments)(options.projectRoot, cypressConfig),
                        devServerTarget,
                        testingType: 'e2e',
                    },
                    configurations: {
                        production: {
                            devServerTarget: `${options.project}:serve:production`,
                        },
                    },
                },
            },
            tags: [],
            implicitDependencies: options.project ? [options.project] : undefined,
        };
        if (project.targets?.['serve-static']) {
            e2eProjectConfig.targets.e2e.configurations.ci = {
                devServerTarget: `${options.project}:serve-static`,
            };
        }
    }
    else {
        throw new Error(`Either project or baseUrl should be specified.`);
    }
    if (detectedCypressVersion < 7) {
        e2eProjectConfig.targets.e2e.options.tsConfig = (0, devkit_1.joinPathFragments)(options.projectRoot, 'tsconfig.json');
    }
    (0, devkit_1.addProjectConfiguration)(tree, options.projectName, e2eProjectConfig);
}
/**
 * @deprecated use cypressE2EConfigurationGenerator instead
 **/
async function cypressProjectGenerator(host, schema) {
    return await cypressProjectGeneratorInternal(host, {
        projectNameAndRootFormat: 'derived',
        ...schema,
    });
}
exports.cypressProjectGenerator = cypressProjectGenerator;
/**
 * @deprecated use cypressE2EConfigurationGenerator instead
 **/
async function cypressProjectGeneratorInternal(host, schema) {
    const options = await normalizeOptions(host, schema);
    const tasks = [];
    const cypressVersion = (0, cypress_version_1.installedCypressVersion)();
    // if there is an installed cypress version, then we don't call
    // init since we want to keep the existing version that is installed
    if (!cypressVersion) {
        tasks.push(await (0, init_1.cypressInitGenerator)(host, options));
    }
    if (schema.bundler === 'vite') {
        tasks.push((0, devkit_1.addDependenciesToPackageJson)(host, {}, {
            vite: versions_1.viteVersion,
        }));
    }
    createFiles(host, options);
    addProject(host, options);
    const installTask = await (0, add_linter_1.addLinterToCyProject)(host, {
        ...options,
        cypressDir: 'src',
        linter: schema.linter,
        project: options.projectName,
        overwriteExisting: true,
    });
    tasks.push(installTask);
    if (!options.skipFormat) {
        await (0, devkit_1.formatFiles)(host);
    }
    return (0, devkit_1.runTasksInSerial)(...tasks);
}
exports.cypressProjectGeneratorInternal = cypressProjectGeneratorInternal;
async function normalizeOptions(host, options) {
    let maybeRootProject;
    let isRootProject = false;
    const projects = (0, devkit_1.getProjects)(host);
    // nx will set the project option for generators when ran within a project.
    // since the root project will always be set for standalone projects we can just check it here.
    if (options.project) {
        maybeRootProject = projects.get(options.project);
    }
    if (maybeRootProject?.root === '.' ||
        // should still check to see if we are in a standalone based workspace
        (!maybeRootProject &&
            Array.from(projects.values()).some((config) => config.root === '.'))) {
        isRootProject = true;
    }
    let { projectName, projectRoot } = await (0, project_name_and_root_utils_1.determineProjectNameAndRootOptions)(host, {
        name: options.name,
        projectType: 'application',
        directory: isRootProject ? options.name : options.directory,
        projectNameAndRootFormat: isRootProject
            ? 'as-provided'
            : options.projectNameAndRootFormat,
        callingGenerator: '@nx/cypress:cypress-project',
    });
    options.linter = options.linter || eslint_1.Linter.EsLint;
    options.bundler = options.bundler || 'webpack';
    return {
        ...options,
        // other generators depend on the rootProject flag down stream
        rootProject: isRootProject,
        projectName,
        projectRoot,
    };
}
exports.default = cypressProjectGenerator;
