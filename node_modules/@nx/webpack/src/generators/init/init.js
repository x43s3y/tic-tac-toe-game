"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.webpackInitGenerator = void 0;
const devkit_1 = require("@nx/devkit");
const add_swc_dependencies_1 = require("@nx/js/src/utils/swc/add-swc-dependencies");
const versions_1 = require("../../utils/versions");
async function webpackInitGenerator(tree, schema) {
    const shouldAddPlugin = process.env.NX_PCV3 === 'true';
    const tasks = [];
    const devDependencies = {
        '@nx/webpack': versions_1.nxVersion,
    };
    if (shouldAddPlugin) {
        devDependencies['webpack-cli'] = versions_1.webpackCliVersion;
    }
    if (schema.compiler === 'swc') {
        devDependencies['swc-loader'] = versions_1.swcLoaderVersion;
        const addSwcTask = (0, add_swc_dependencies_1.addSwcDependencies)(tree);
        tasks.push(addSwcTask);
    }
    if (schema.compiler === 'tsc') {
        devDependencies['tslib'] = versions_1.tsLibVersion;
    }
    if (schema.uiFramework === 'react') {
        devDependencies['@pmmmwh/react-refresh-webpack-plugin'] =
            versions_1.reactRefreshWebpackPluginVersion;
        devDependencies['@svgr/webpack'] = versions_1.svgrWebpackVersion;
        devDependencies['react-refresh'] = versions_1.reactRefreshVersion;
        devDependencies['url-loader'] = versions_1.urlLoaderVersion;
    }
    if (!schema.skipFormat) {
        await (0, devkit_1.formatFiles)(tree);
    }
    const baseInstallTask = (0, devkit_1.addDependenciesToPackageJson)(tree, {}, devDependencies);
    tasks.push(baseInstallTask);
    if (shouldAddPlugin)
        addPlugin(tree);
    return (0, devkit_1.runTasksInSerial)(...tasks);
}
exports.webpackInitGenerator = webpackInitGenerator;
function addPlugin(tree) {
    const nxJson = (0, devkit_1.readNxJson)(tree);
    nxJson.plugins ??= [];
    for (const plugin of nxJson.plugins) {
        if (typeof plugin === 'string'
            ? plugin === '@nx/webpack/plugin'
            : plugin.plugin === '@nx/webpack/plugin') {
            return;
        }
    }
    nxJson.plugins.push({
        plugin: '@nx/webpack/plugin',
        options: {
            buildTargetName: 'build',
            serveTargetName: 'serve',
            previewTargetName: 'preview',
        },
    });
    (0, devkit_1.updateNxJson)(tree, nxJson);
}
exports.default = webpackInitGenerator;
