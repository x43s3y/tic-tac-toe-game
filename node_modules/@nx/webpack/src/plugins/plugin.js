"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createNodes = exports.createDependencies = void 0;
const devkit_1 = require("@nx/devkit");
const path_1 = require("path");
const get_named_inputs_1 = require("@nx/devkit/src/utils/get-named-inputs");
const fs_1 = require("fs");
const read_webpack_options_1 = require("../utils/webpack/read-webpack-options");
const resolve_user_defined_webpack_config_1 = require("../utils/webpack/resolve-user-defined-webpack-config");
const js_1 = require("@nx/js");
const cache_directory_1 = require("nx/src/utils/cache-directory");
const calculate_hash_for_create_nodes_1 = require("@nx/devkit/src/utils/calculate-hash-for-create-nodes");
const cachePath = (0, path_1.join)(cache_directory_1.projectGraphCacheDirectory, 'webpack.hash');
const targetsCache = (0, fs_1.existsSync)(cachePath) ? readTargetsCache() : {};
const calculatedTargets = {};
function readTargetsCache() {
    return (0, devkit_1.readJsonFile)(cachePath);
}
function writeTargetsToCache(targets) {
    (0, devkit_1.writeJsonFile)(cachePath, targets);
}
const createDependencies = () => {
    writeTargetsToCache(calculatedTargets);
    return [];
};
exports.createDependencies = createDependencies;
exports.createNodes = [
    '**/webpack.config.{js,ts,mjs,mts,cjs,cts}',
    async (configFilePath, options, context) => {
        options ??= {};
        options.buildTargetName ??= 'build';
        options.serveTargetName ??= 'serve';
        options.serveStaticTargetName ??= 'serve-static';
        options.previewTargetName ??= 'preview';
        const projectRoot = (0, path_1.dirname)(configFilePath);
        // Do not create a project if package.json and project.json isn't there.
        const siblingFiles = (0, fs_1.readdirSync)((0, path_1.join)(context.workspaceRoot, projectRoot));
        if (!siblingFiles.includes('package.json') &&
            !siblingFiles.includes('project.json')) {
            return {};
        }
        const hash = (0, calculate_hash_for_create_nodes_1.calculateHashForCreateNodes)(projectRoot, options, context, [
            (0, js_1.getLockFileName)((0, devkit_1.detectPackageManager)(context.workspaceRoot)),
        ]);
        const targets = targetsCache[hash]
            ? targetsCache[hash]
            : await createWebpackTargets(configFilePath, projectRoot, options, context);
        return {
            projects: {
                [projectRoot]: {
                    projectType: 'application',
                    targets,
                },
            },
        };
    },
];
async function createWebpackTargets(configFilePath, projectRoot, options, context) {
    const namedInputs = (0, get_named_inputs_1.getNamedInputs)(projectRoot, context);
    const webpackConfig = (0, resolve_user_defined_webpack_config_1.resolveUserDefinedWebpackConfig)((0, path_1.join)(context.workspaceRoot, configFilePath), (0, js_1.getRootTsConfigPath)(), true);
    const webpackOptions = await (0, read_webpack_options_1.readWebpackOptions)(webpackConfig);
    const outputPath = normalizeOutputPath(webpackOptions.output?.path) ??
        '{workspaceRoot}/dist/{projectRoot}';
    const targets = {};
    const configBasename = (0, path_1.basename)(configFilePath);
    targets[options.buildTargetName] = {
        command: `webpack -c ${configBasename} --node-env=production`,
        options: { cwd: projectRoot },
        cache: true,
        dependsOn: [`^${options.buildTargetName}`],
        inputs: 'production' in namedInputs
            ? [
                'production',
                '^production',
                {
                    externalDependencies: ['webpack-cli'],
                },
            ]
            : [
                'default',
                '^default',
                {
                    externalDependencies: ['webpack-cli'],
                },
            ],
        outputs: [outputPath],
    };
    targets[options.serveTargetName] = {
        command: `webpack serve -c ${configBasename} --node-env=development`,
        options: {
            cwd: projectRoot,
        },
    };
    targets[options.previewTargetName] = {
        command: `webpack serve -c ${configBasename} --node-env=production`,
        options: {
            cwd: projectRoot,
        },
    };
    targets[options.serveStaticTargetName] = {
        executor: '@nx/web:file-server',
        options: {
            buildTarget: options.buildTargetName,
        },
    };
    return targets;
}
function normalizeOutputPath(outputPath) {
    if (!outputPath)
        return undefined;
    if ((0, path_1.isAbsolute)(outputPath)) {
        return `{workspaceRoot}/${(0, path_1.relative)(devkit_1.workspaceRoot, outputPath)}`;
    }
    else {
        return outputPath;
    }
}
