"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildStaticRemotes = void 0;
const devkit_1 = require("@nx/devkit");
const child_process_1 = require("child_process");
async function buildStaticRemotes(remotes, nxBin, context, options) {
    if (!remotes.staticRemotes ||
        (Array.isArray(remotes.staticRemotes) && !remotes.staticRemotes.length)) {
        return;
    }
    const mappedLocationOfRemotes = {};
    for (const app of remotes.staticRemotes) {
        mappedLocationOfRemotes[app] = `http${options.ssl ? 's' : ''}://${options.host}:${options.staticRemotesPort}/${app}`;
    }
    process.env.NX_MF_DEV_SERVER_STATIC_REMOTES = JSON.stringify(mappedLocationOfRemotes);
    await new Promise((res) => {
        devkit_1.logger.info(`NX Building ${remotes.staticRemotes.length} static remotes...`);
        const staticProcess = (0, child_process_1.fork)(nxBin, [
            'run-many',
            `--target=build`,
            `--projects=${remotes.staticRemotes.join(',')}`,
            ...(context.configurationName
                ? [`--configuration=${context.configurationName}`]
                : []),
            ...(options.parallel ? [`--parallel=${options.parallel}`] : []),
        ], {
            cwd: context.root,
            stdio: ['ignore', 'pipe', 'pipe', 'ipc'],
        });
        staticProcess.stdout.on('data', (data) => {
            const ANSII_CODE_REGEX = /[\u001b\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/g;
            const stdoutString = data.toString().replace(ANSII_CODE_REGEX, '');
            if (stdoutString.includes('Successfully ran target build')) {
                staticProcess.stdout.removeAllListeners('data');
                devkit_1.logger.info(`NX Built ${remotes.staticRemotes.length} static remotes`);
                res();
            }
        });
        staticProcess.stderr.on('data', (data) => devkit_1.logger.info(data.toString()));
        staticProcess.on('exit', (code) => {
            if (code !== 0) {
                throw new Error(`Remotes failed to build. See above for errors.`);
            }
        });
        process.on('SIGTERM', () => staticProcess.kill('SIGTERM'));
        process.on('exit', () => staticProcess.kill('SIGTERM'));
    });
}
exports.buildStaticRemotes = buildStaticRemotes;
